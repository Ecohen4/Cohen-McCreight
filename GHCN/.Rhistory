list.files()
load(mergeDF.rsav)
load("mergeDF.rsav")
head(mergeDF)
head(mergeDF.rsav)
head(CGSmeta)
test<-subset(CGSmeta, Stn_code %in% levels(Stationwise$Stn_code), select=c(Stn_code, X.DEC, Y.DEC))
identical(test,CGSmeta2)
head(test)
head(CGSmeta2)
dim(test)
dime(CGSmeta2)
dim(CGSmeta2)
levels(Stationwise$Stn_code)
levels(CGS$Stn_code)
levels(CGSmeta$Stn_code)
levels(CGSmeta2$Stn_code)
levels(test$Stn_code)
length(levels(CGSmeta2$Stn_code))
length(levels(CGSmeta$Stn_code))
length(levels(Stationswise$Stn_code))
load("Stationwise.rsav")
head(Stationwise)
length(levels(Stationwise$Stn_code))
head(mergeDF)
mergeDF<-merge(Stationwise,CGSmeta2, by="Stn_code", all.x=TRUE)
head(mergeDF)
save(mergeDF, file='mergeDF.rsav')
dim(Stationwise)
dim(mergeDF)
length(levels(mergeDF$Stn_code))
length(levels(Stationwise$Stn_code))
levels(Stationwise$Stn_code)
setwd("/Users/elliotcohen/Dropbox/Data/Cohen-McCreight/GHCN")
load("Stationwise.rsav")
load("Stationwise2.rsav")
load("CGSmeta.rsav")
load("CGSmeta2.rsav")
load("mergeDF.rsav")
summary(CGSmeta[,c("X.DEC",'Y.DEC')])  ## positive! nice.
summary(CGSmeta2[,c("X.DEC",'Y.DEC')])  ## positive! nice.
head(stations)
head(monthly)
load("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/stations.csv")
load("/Users/elliotcohen/Dropbox/Data/Cohen-McCreight/data/stations.csv")
stations<-read.csv("/Users/elliotcohen/Dropbox/Data/Cohen-McCreight/data/stations.csv")
head(stations)
dim(stations)
head(monthly)
keep.stations<-levels(monthly$USAFID)
keep.stations
length(keep.stations)
head(monthly)
summary(monthly[,c("LAT", "LONG")])
str(monthly)
summary(monthly$LAT)
range(monthly$LAT)
str(monthly)
monthly$LAT<-as.numeric(monthly$LAT)
monthly$LONG<-as.numeric(monthly$LONG)
summary(monthly[,c("LAT", "LONG")])
head(monthly)
stations
range(st$DATE)
summary(monthly[,c("LAT", "LONG")])
summary(stations[,c("LAT", "LONG")])
list.files()
getwd()
list.files("/Users/elliotcohen/Dropbox/data/cohen-mccreight/GHCN")
list.files("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw")
column.widths <- c(4,6,5,4,2,2,2,2,1,6,7,5,5,5,4,3,1,1,4,1,5,1,1,1,6,1,1,1,5,1,5,1,5,1)
sum(column.widths)
column.names<-c("Total-Variable-Charachters","USAFID","WBAN","YYYY","MM","DD","HR","data-source","Lat","Long","Geophysical-Report-Type","Elev","Identifier","QAQC","WIND-DIR","WIND-DIR-QAQC","WIND-CAT","WIND-SPD","WIND-SPD-QAQC","Cloud-height","Cloud-height-QAQC","Cloud-height-method","CAVOK","Visibility","Visibility-QAQC","Visibility-var","Visibility-var-QAQC","Air-TEMP","TEMP-QAQC","Dewpoint","Dewpoint-QAQC","ATM-Pressure","Pressure-QAQC")
files <- list.files("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/")
files
column.widths <- c(4,6,5,4,2,2,2,2,1,6,7,5,5,5,4,3,1,1,4,1,5,1,1,1,6,1,1,1,5,1,5,1,5,1)
column.names<-c("Total-Variable-Charachters","USAFID","WBAN","YYYY","MM","DD","HR","data-source","Lat","Long","Geophysical-Report-Type","Elev","Identifier","QAQC","WIND-DIR","WIND-DIR-QAQC","WIND-CAT","WIND-SPD","WIND-SPD-QAQC","Cloud-height","Cloud-height-QAQC","Cloud-height-method","CAVOK","Visibility","Visibility-QAQC","Visibility-var","Visibility-var-QAQC","Air-TEMP","TEMP-QAQC","Dewpoint","Dewpoint-QAQC","ATM-Pressure","Pressure-QAQC")
i=1
length(column.names)
length(column.widths)
column.widths <- c(4,6,5,4,2,2,2,2,1,6,7,5,5,5,4,3,1,1,4,1,5,1,1,1,6,1,1,1,5,1,5,1,5,1)
column.names<-c("Total-Var-Chars","USAFID","WBAN","YYYY","MM","DD","HR","Min","data-source","Lat","Long","Report-Type","Elev","Identifier","QAQC","WIND-DIR","WIND-DIR-QAQC","WIND-Measure","WIND-SPD","WIND-SPD-QAQC","Cloud-height","Cloud-height-QAQC","Cloud-height-method","CAVOK","Visibility","Visibility-QAQC","Visibility-var","Visibility-var-QAQC","TEMP","TEMP-QAQC","Dewpoint","Dewpoint-QAQC","ATM-Pressure","Pressure-QAQC")
length(column.widths)
length(column.names)
df<-as.data.frame(matrix(NA,length(files),length()))
df<-as.data.frame(matrix(NA,length(files),length(column.names)))
df
dim(df)
i=1
data <- read.fwf(paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""), column.widths)
head(data)
names(data)<-column.names
head(data)
head(data)
getwd()
?substr
st.set$BEGIN
View(outputs2)
head(stations)
keep.stations
levels(monthly$USAFID)
monthly<-droplevels(monthly)
levels(monthly$USAFID)
column.names<-c("Total-Var-Chars","USAFID","WBAN","YYYY","MM","DD","HR","Min","data-source","Lat","Long","Report-Type","Elev","Identifier","QAQC","WIND-DIR","WIND-DIR-QAQC","WIND-Measure","WIND-SPD","WIND-SPD-QAQC","Cloud-height","Cloud-height-QAQC","Cloud-height-method","CAVOK","Visibility","Visibility-QAQC","Visibility-var","Visibility-var-QAQC","TEMP","TEMP-QAQC","Dewpoint","Dewpoint-QAQC","ATM-Pressure","Pressure-QAQC")
length(column.names)
df<-as.data.frame(matrix(NA,length(files),length(column.names)))
for (i in 1:length(files)) {
data <- read.fwf(paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""), column.widths)
names(data)<-column.names
#   data <- data[,c(2:8,10:11,13,16,19,29,31,33)]
#   names(data) <- c("USAFID","WBAN","YR","M","D","HR","MIN","LAT","LONG","ELEV","WIND.DIR", "WIND.SPD", "TEMP","DEW.POINT","ATM.PRES")
data$LAT <- data$LAT/1000
data$LONG <- data$LONG/1000
data$WIND.SPD <- data$WIND.SPD/10
data$TEMP <- data$TEMP/10
data$DEW.POINT <- data$DEW.POINT/10
data$ATM.PRES <- data$ATM.PRES/10
write.csv(data, file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/", files[i], ".csv", sep=""), row.names=FALSE)
df[i,]<-data[1,]
#   stations[i,1:3] <- data[1,1:3]
#   stations[i,4:6] <- data[1,8:10]
}
i=1
df<-as.data.frame(matrix(NA,length(files),length(column.names)))
head(df)
data <- read.fwf(paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""), column.widths)
names(data)<-column.names
head(data)
data$LAT <- data$LAT/1000
data$LONG <- data$LONG/1000
data$WIND.SPD <- data$WIND.SPD/10
data$TEMP <- data$TEMP/10
data$DEW.POINT <- data$DEW.POINT/10
data$ATM.PRES <- data$ATM.PRES/10
column.names<-c("Total.Var.Char","USAFID","WBAN","YYYY","MM","DD","HR","Min","data.source","LAT","LONG","Report.Type","Elev","Identifier","QAQC","WIND.DIR","WIND.DIR.QAQC","WIND.Measure","WIND.SPD","WIND.SPD.QAQC","Cloud.height","Cloud.height.QAQC","Cloud.height.method","CAVOK","Visibility","Visibility.QAQC","Visibility.var","Visibility.var.QAQC","TEMP","TEMP.QAQC","DEW.POINT","DEW.POINT.QAQC","ATM.PRES","ATM.PRES.QAQC")
names(data)<-column.names
data$LAT <- data$LAT/1000
data$LONG <- data$LONG/1000
data$WIND.SPD <- data$WIND.SPD/10
data$TEMP <- data$TEMP/10
data$DEW.POINT <- data$DEW.POINT/10
data$ATM.PRES <- data$ATM.PRES/10
write.csv(data, file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/", files[i], ".csv", sep=""), row.names=FALSE)
head(data)
df<-as.data.frame(matrix(NA,length(files),length(column.names)))
for (i in 1:length(files)) {
data <- read.fwf(paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""), column.widths)
names(data)<-column.names
#   data <- data[,c(2:8,10:11,13,16,19,29,31,33)]
#   names(data) <- c("USAFID","WBAN","YR","M","D","HR","MIN","LAT","LONG","ELEV","WIND.DIR", "WIND.SPD", "TEMP","DEW.POINT","ATM.PRES")
data$LAT <- data$LAT/1000
data$LONG <- data$LONG/1000
data$WIND.SPD <- data$WIND.SPD/10
data$TEMP <- data$TEMP/10
data$DEW.POINT <- data$DEW.POINT/10
data$ATM.PRES <- data$ATM.PRES/10
write.csv(data, file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/", files[i], ".csv", sep=""), row.names=FALSE)
if(i==1) {dataset <- data} else {dataset <- rbind(dataset,data)}
}
head(data)
dim(data)
dim(dataset)
write.csv(dataset, file="Northern_India_weather_station_data.csv", row.names=FALSE)
dim(st.set)
getwd()
save(dataset, file='Northern_India_Weather_Station_Data.rsav')
save(dataset, file='Wx_stn_data.rsav')
length(levels(dataset$USAFID))
str(dataset)
dataset$USAFID<-as.factor(dataset$USAFID)
length(levels(dataset$USAFID))
load("Wx_stn_data.rsav")
dim(Wx_stn_data)
getwd()
list.files()
load("Wx_stn_data.rsav") # station data for
head(Wx_stn_data)
head(Wx_stn_data.rsav)
head("Wx_stn_data")
head(dataset)
save(dataset, file="dataset.rsav")
summary(CGSmeta2[,c("X.DEC",'Y.DEC')])  ## positive! nice.
summary(monthly[,c("LAT", "LONG")])
head(st.set)
head(dataset)
st<-st.set # all the data...
sum(st$TEMP == 999.9)
sum(st$WIND.SPD == 999.9)
sum(st$WIND.DIR == 999)
sum(st$DEW.POINT == 999.9)
sum(st$ATM.PRES == 9999.9)
st$WIND.DIR <- st$DEW.POINT <- st$ATM.PRES <- NULL
st$TEMP[st$TEMP == 999.9] <- NA
st$WIND.SPD[st$WIND.SPD == 999.9] <- NA
#st <- st[st$MIN == 0,]
dim(st)
head(st)
range(st$LAT)
str(st)
str(dataset)
st$LAT<-as.numeric(st$LAT)
st$LONG<-as.numeric(st$LONG)
range(st$LAT)
range(st$LONG)
summary(st$LAT)
summary(st$LONG)
range(dataset$LONG)
summary(dataset$LONG)
summary(dataset$LAT)
files <- list.files("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw")
files
for (i in 1:length(files)){
st <- read.csv(file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw", files[i], sep=""))
if(i==1) {st.set <- st} else {st.set <- rbind(st.set,st)}
}
for (i in 1:length(files)){
st <- read.csv(file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""))
if(i==1) {st.set <- st} else {st.set <- rbind(st.set,st)}
}
length(files)
i=1
st <- read.csv(file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""))
if(i==1) {st.set <- st} else {st.set <- rbind(st.set,st)}
dim(st)
dim(st.set)
for (i in 1:length(files)){
st <- read.csv(file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/raw/", files[i], sep=""))
if(i==1) {st.set <- st} else {st.set <- rbind(st.set,st)}
}
paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/csv/", files[i],".csv", sep="")
i
st <- read.csv(file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/csv/", files[i],".csv", sep=""))
for (i in 1:length(files)){
st <- read.csv(file=paste("/Users/elliotcohen/Dropbox/data/cohen-mccreight/data/csv/", files[i],".csv", sep=""))
if(i==1) {st.set <- st} else {st.set <- rbind(st.set,st)}
}
dim(st.set)
head(st.set)
temp<-subset(st.set, select=c(Total.Var.Char, USAFID, YYYY, MM, DD, HR, Min, LAT, LONG, ELEV, TEMP, TEMP.QAQC))
temp<-subset(st.set, select=c(Total.Var.Char, USAFID, YYYY, MM, DD, HR, Min, LAT, LONG, Elev, TEMP, TEMP.QAQC))
head(temp)
st<-subset(st.set, select=c(Total.Var.Char, USAFID, YYYY, MM, DD, HR, Min, LAT, LONG, Elev, TEMP, TEMP.QAQC))
head(st)
test<-st[complete.cases(st[,]),]
dim(st)
dim(test)
table(st$TEMP.QAQC)
test<-subset(st, TEMP.QAQC != 2 | 3 | 6 | 7) #remove suspect observations..
dim(test)
str(st)
test<-subset(st, TEMP.QAQC != 2) #remove suspect observations..
dim(test)
dim(st)[1]-dim(test)[1]
st<-subset(st, TEMP.QAQC != 2) #remove suspect observations..
st<-subset(st, TEMP.QAQC != 3) #remove suspect observations..
st<-subset(st, TEMP.QAQC != 6) #remove suspect observations..
st<-subset(st, TEMP.QAQC != 7) #remove suspect observations..
dim(st)
?omit.NA
?omit
test<-st[complete.cases(st[,]),]
length(which(is.na(st$TEMP))) #number of NA's in TEMP column=4625
?complete.cases
test<-na.omit(st)
dim(st)[1]-dim(test)[1]       #number of NA's removed from DF=0 --> dims match.
sum(st$TEMP == 999.9)
sum(st$WIND.SPD == 999.9)
sum(st$WIND.DIR == 999)
sum(st$DEW.POINT == 999.9)
sum(st$ATM.PRES == 9999.9)
st$TEMP[st$TEMP == 999.9] <- NA
st$WIND.SPD[st$WIND.SPD == 999.9] <- NA
head(st)
st$TEMP[st$TEMP == 999.9] <- NA
sum(st$TEMP == 999.9)
test<-st[complete.cases(st[,]),]
length(which(is.na(st$TEMP))) #number of NA's in TEMP column=0
dim(st)[1]-dim(test)[1]       #number of NA's removed from DF=0 --> dims match.
st<-test
test2<-na.omit(st)
identical(test,test2)
# create DATE attributes
st$DATE <- as.Date(paste(st$YR, st$M, st$D, sep="-"), format="%Y-%m-%d")
st$YM<-paste(st$YR, st$M, sep="-") $year-month combinations
st$YM<-as.factor(st$YM)
length(levels(st$YM)) #36 months in the record
st$DATE <- as.Date(paste(st$YR, st$M, st$D, sep="-"), format="%Y-%m-%d")
st$DATE <- as.Date(paste(st$YYYY, st$MM, st$DD, sep="-"), format="%Y-%m-%d")
head(st)
st$YM<-paste(st$YYYY, st$MM, sep="-")   #unique months
st$YM<-as.factor(st$YM)
length(levels(st$YM)) #36 months in the record
summary(st$LAT)
summary(st$LONG)
daily<-ddply(st, .(USAFID, LAT, LONG, Elev, DATE), summarize, TEMP=mean(TEMP))
dim(daily)
head(daily)
test<-daily[complete.cases(daily[,]),]
dim(test)
length(which(is.na(daily$TEMP))) #number of NA's in TEMP column... 2055
dim(daily)[1]-dim(test)[1] #number of NA's removed from the DF.. 2055
# quality control: check number of observations at each weather station.
# Toss stations with less than 80% of the data
table(daily$USAFID)
nstns<-length(levels(daily$USAFID))
nobs<-length(range(daily$DATE)[1]:range(daily$DATE)[2]) #obs per station during period of record if none missing..
stations<-levels(st$USAFID)       # vector of station names
stations<-as.data.frame(stations)
nstns
levels(daily$USAFID)
str(daily)
daily$USAFID<-as.factor(daily$USAFID)
table(daily$USAFID)
nstns<-length(levels(daily$USAFID))
nstns
nobs<-length(range(daily$DATE)[1]:range(daily$DATE)[2]) #obs per station during period of record if none missing..
nobs
stn_names<-levels(st$USAFID)       # vector of station names
stn_names
stn_names<-levels(daily$USAFID)       # vector of station names
stn_names
stn_codes<-levels(daily$USAFID)       # vector of station names
stn_codes<-as.data.frame(stn_codes)
stn_codes$keep<-0  # empty vector to be populated in for loop...
nstns
for (i in 1:nstns){
if (table(daily$USAFID)[i]<0.8*nobs) {stn_codes$keep[i]<-"No"} else
{stn_codes$keep[i]<-"Yes"}
}
head(stn_codes)
keep<-subset(stn_codes, keep=="Yes")
dim(stn_codes)
dim(keep)
head(keep)
keep.data<-daily[daily$USAFID %in% keep$stations,]
test<-subset(daily, USAFID %in% keep$stations)
identical(keep.data, test) #true
daily<-keep.data
str(st)
monthly<-ddply(st, .(USAFID, LAT, LONG, Elev, YYYY, MM, YM, DATE), summarize, TEMP=mean(TEMP))
monthly<-ddply(st, .(USAFID, LAT, LONG, Elev, YYYY, MM, YM), summarize, TEMP=mean(TEMP))
dim(monthly)
head(monthly)
monthly$DATE<-as.Date(paste(monthly$YM, "15", sep="-"), format="%Y-%m-%d")
head(monthly)
length(levels(monthly$YM))
head(stn_codes)
dim(stn_codes)
stn_codes
nstns
for (i in 1:nstns){
if (table(monthly$USAFID)[i]<length(levels(monthly$YM))) {stn_codes$keep2[i]<-"No"} else {stn_codes$keep2[i]<-"Yes"}
}
stn_codes
keep<-subset(stn_codes, keep2=="Yes")
head(keep)
keep.data<-monthly[monthly$USAFID %in% keep$stn_codes,]
test<-subset(monthly, USAFID %in% keep$stn_codes)
identical(keep.data, test) #true
head(keep.data)
summary(keep.data$LAT)
summary(keep.data$LONG)
summary(st$LONG)
summary(st$LAT)
monthly<-keep.data
# how many NA's are there in the monthly TEMP data...
length(which(is.na(monthly$TEMP))) # 0
length(which(is.na(monthly$WIND.SPD))) # 720
length(which(is.na(monthly$TEMP))) # 0
save(monthly, file="Monthly_mean_TEMP.rsav")
save(daily, file="Daily_mean_TEMP.rsav")
hourly.test<-subset(st, USAFID==420270)
daily.test<-subset(daily, USAFID==420270)
monthly.test<-subset(monthly, USAFID==420270)
plot(hourly.test$DATE, hourly.test$TEMP, main="Temperature readings", ylab="Temperature (Degrees C)", xlab="Month", col="grey")
points(daily.test$DATE, daily.test$TEMP, col="brown")
head(daily)
head(daily)
head(monthly)
lines(monthly.test$DATE, monthly.test$TEMP, type="b", pch=16)
legend("topleft", c("Hourly", "Daily mean", "Monthly mean"), inset=0.02, pch=c(1,1,16), col=c("grey", "red", "black"))
head(test)
head(st)
d.mean<-aggregate(st$TEMP ~ st$DATE + st$USAFID, data=st, FUN=mean)
dim(d.mean)
head(d.mean)
m.mean<-aggregate(st$TEMP ~ st$USAFID + st$YR + st$M, data=st, FUN=mean)
m.mean<-aggregate(st$TEMP ~ st$USAFID + st$YYYY + st$MM, data=st, FUN=mean)
names(d.mean)<-c("DATE","USAFID","TEMP")
head(m.mean)
names(m.mean)<-c("USAFID","YYYY","MM","TEMP")
str(d.mean)
str(m.mean)
m.mean$DATE <- as.Date(paste(m.mean$YYYY, m.mean$MM, "15", sep="-"))
head(m.mean)
dim(m.mean)
dim(monthly)
daily<-d.mean
test<-daily[complete.cases(daily[,]),]
# check dimensions...
length(which(is.na(daily$TEMP))) #number of NA's in TEMP column... 0
dim(daily)[1]-dim(test)[1] #number of NA's removed from the DF.. 0
# passes dim check.
daily$USAFID<-as.factor(daily$USAFID)
table(daily$USAFID)
nstns<-length(levels(daily$USAFID))
nobs<-length(range(daily$DATE)[1]:range(daily$DATE)[2]) #obs per station during period of record if none missing..
stn_codes<-levels(daily$USAFID)       # vector of station names
stn_codes<-as.data.frame(stn_codes)
stn_codes$keep<-0  # empty vector to be populated in for loop...
for (i in 1:nstns){
if (table(daily$USAFID)[i]<0.8*nobs) {stn_codes$keep[i]<-"No"} else
{stn_codes$keep[i]<-"Yes"}
}
keep<-subset(stn_codes, keep=="Yes")  #keep 108 of 136 statoins
#now subset "daily" to keep only the observations associated with a station that we want to keep
keep.data<-daily[daily$USAFID %in% keep$stations,]
test<-subset(daily, USAFID %in% keep$stations)
identical(keep.data, test) #true
head(keep.data)
daily<-d.mean
head(daily)
test<-daily[complete.cases(daily[,]),]
# check dimensions...
length(which(is.na(daily$TEMP))) #number of NA's in TEMP column... 0
dim(daily)[1]-dim(test)[1] #number of NA's removed from the DF.. 0
# passes dim check.
daily$USAFID<-as.factor(daily$USAFID)
table(daily$USAFID)
nstns<-length(levels(daily$USAFID))
nobs<-length(range(daily$DATE)[1]:range(daily$DATE)[2]) #obs per station during period of record if none missing..
stn_codes<-levels(daily$USAFID)       # vector of station names
stn_codes<-as.data.frame(stn_codes)
# Create a vector identifying which stations have less than 80% of the data and thus should be removed
stn_codes$keep<-0  # empty vector to be populated in for loop...
for (i in 1:nstns){
if (table(daily$USAFID)[i]<0.8*nobs) {stn_codes$keep[i]<-"No"} else
{stn_codes$keep[i]<-"Yes"}
}
keep<-subset(stn_codes, keep=="Yes")  #keep 108 of 136 statoins
#now subset "daily" to keep only the observations associated with a station that we want to keep
keep.data<-daily[daily$USAFID %in% keep$stn_codes,]
test<-subset(daily, USAFID %in% keep$stn_codes)
head(keep.data)
head(test)
identical(keep.data, test) #true
dim(keep.data)
dim(test)
dim(daily)
keep
dim(keep)
daily<-keep.data
head(daily)
hourly.test<-subset(st, USAFID==420270)
daily.test<-subset(daily, USAFID==420270)
monthly.test<-subset(monthly, USAFID==420270)
plot(hourly.test$DATE, hourly.test$TEMP, main="Temperature readings", ylab="Temperature (Degrees C)", xlab="Month", col="grey")
points(daily.test$DATE, daily.test$TEMP, col="brown")
lines(monthly.test$DATE, monthly.test$TEMP, type="b", pch=16)
legend("topleft", c("Hourly", "Daily mean", "Monthly mean"), inset=0.02, pch=c(1,1,16), col=c("grey", "red", "black"))
summary(CGSmeta2[,c("X.DEC",'Y.DEC')])  ## positive! nice.
##summary(ghcnMeta[,c("latitude",'longitude')])
summary(monthly[,c("LAT", "LONG")])
summary(monthly[,c("LONG", "LAT")])
ISHmeta<-monthly
summary(ISHmeta[,c("LONG", "LAT")])
summary(CGSmeta2[,c("X.DEC",'Y.DEC')])  ## positive! nice.
ISHmeta<-monthly
summary(ISHmeta[,c("LONG", "LAT")])
findClosestISH <- function(stn, knn) {
## find station name, id, lat,
llDist <- rdist.earth(matrix(c(stn$X.DEC,stn$Y.DEC), ncol=2),
matrix(c(monthly$LONG, monthly$LAT), ncol=2),
miles=FALSE, R=6371) ## mean radius in km
sortDistInds <- sort( llDist, ind=TRUE)$ix
return( cbind(stnCode=stn$Stn_code,
distance.km=llDist[sortDistInds[1:knn]],
ISHMeta[sortDistInds[1:knn],] ) )
}
knn=7  ## i kept a few to look at, though I end up throwing them out
ISHTempsNearby <- dlply( CGSmeta, 1, findClosestISH, knn=knn )
?rdist.earth
??rdist.earth
require(fields)
findClosestISH <- function(stn, knn) {
## find station name, id, lat,
llDist <- rdist.earth(matrix(c(stn$X.DEC,stn$Y.DEC), ncol=2),
matrix(c(monthly$LONG, monthly$LAT), ncol=2),
miles=FALSE, R=6371) ## mean radius in km
sortDistInds <- sort( llDist, ind=TRUE)$ix
return( cbind(stnCode=stn$Stn_code,
distance.km=llDist[sortDistInds[1:knn]],
ISHMeta[sortDistInds[1:knn],] ) )
}
knn=7  ## i kept a few to look at, though I end up throwing them out
ISHTempsNearby <- dlply( CGSmeta, 1, findClosestISH, knn=knn )
findClosestISH <- function(stn, knn) {
## find station name, id, lat,
llDist <- rdist.earth(matrix(c(stn$X.DEC,stn$Y.DEC), ncol=2),
matrix(c(monthly$LONG, monthly$LAT), ncol=2),
miles=FALSE, R=6371) ## mean radius in km
sortDistInds <- sort( llDist, ind=TRUE)$ix
return( cbind(stnCode=stn$Stn_code,
distance.km=llDist[sortDistInds[1:knn]],
ISHmeta[sortDistInds[1:knn],] ) )
}
knn=7  ## i kept a few to look at, though I end up throwing them out
ISHTempsNearby <- dlply( CGSmeta, 1, findClosestISH, knn=knn )
ISHClosest <- ldply(ISHTempsNearby,
function(ll) ll[which(ll$distance.km==min(ll$distance.km)),])
head(ISHClosest)
ISHClosest
